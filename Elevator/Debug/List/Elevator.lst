
AVRASM ver. 2.1.30  D:\UNIVERSITY\Term 6\Micro\Debug\List\Elevator.asm Thu Mar 07 20:29:35 2019

D:\UNIVERSITY\Term 6\Micro\Debug\List\Elevator.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\UNIVERSITY\Term 6\Micro\Debug\List\Elevator.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\UNIVERSITY\Term 6\Micro\Debug\List\Elevator.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\UNIVERSITY\Term 6\Micro\Debug\List\Elevator.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\UNIVERSITY\Term 6\Micro\Debug\List\Elevator.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\UNIVERSITY\Term 6\Micro\Debug\List\Elevator.asm(1093): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _chosenFloor=R4
                 	.DEF _chosenFloor_msb=R5
                 	.DEF _currentFloor=R6
                 	.DEF _currentFloor_msb=R7
                 	.DEF _condition=R8
                 	.DEF _condition_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bffb      	OUT  GICR,R31
00002f bfeb      	OUT  GICR,R30
000030 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000031 e08d      	LDI  R24,(14-2)+1
000032 e0a2      	LDI  R26,2
000033 27bb      	CLR  R27
                 __CLEAR_REG:
000034 93ed      	ST   X+,R30
000035 958a      	DEC  R24
000036 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000037 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000038 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000039 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 9701      	SBIW R24,1
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00003e bfed      	OUT  SPL,R30
00003f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000040 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000041 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000042 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000043 940c 0061 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * Elevator.c
                 ; *
                 ; * Created: 3/6/2019 11:12:32 PM
                 ; * Author: MSI
                 ; */
                 ;//#include <mega16.h>
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;int chosenFloor;
                 ;int currentFloor;
                 ;
                 ;int up[4] = {0,0,0,0};
                 ;int down[4] = {0,0,0,0};
                 ;
                 ;int condition;
                 ;
                 ;void GoUp(){
                 ; 0000 0012 void GoUp(){
                 
                 	.CSEG
                 _GoUp:
                 ; .FSTART _GoUp
                 ; 0000 0013     PORTD.0 = 1;
000045 9a90      	SBI  0x12,0
                 ; 0000 0014     PORTD.1 = 0;
000046 9891      	CBI  0x12,1
                 ; 0000 0015 }
000047 9508      	RET
                 ; .FEND
                 ;void GoDown(){
                 ; 0000 0016 void GoDown(){
                 _GoDown:
                 ; .FSTART _GoDown
                 ; 0000 0017     PORTD.0 = 0;
000048 9890      	CBI  0x12,0
                 ; 0000 0018     PORTD.1 = 1;
000049 9a91      	SBI  0x12,1
                 ; 0000 0019 }
00004a 9508      	RET
                 ; .FEND
                 ;int isGoingUp(){
                 ; 0000 001A int isGoingUp(){
                 _isGoingUp:
                 ; .FSTART _isGoingUp
                 ; 0000 001B     if((PORTD.0 == 1) && (PORTD.1 == 0) && (currentFloor != 3))
00004b 9b90      	SBIS 0x12,0
00004c c004      	RJMP _0xC
00004d 9991      	SBIC 0x12,1
00004e c002      	RJMP _0xC
00004f d14e      	RCALL SUBOPT_0x0
000050 f409      	BRNE _0xD
                 _0xC:
000051 c001      	RJMP _0xB
                 _0xD:
                 ; 0000 001C         return 1;
000052 c008      	RJMP _0x2000002
                 ; 0000 001D     return 0;
                 _0xB:
000053 c00a      	RJMP _0x2000001
                 ; 0000 001E }
                 ; .FEND
                 ;int isGoingDown(){
                 ; 0000 001F int isGoingDown(){
                 _isGoingDown:
                 ; .FSTART _isGoingDown
                 ; 0000 0020     if((PORTD.0 == 0) && (PORTD.1 == 1) && (currentFloor != 1))
000054 9990      	SBIC 0x12,0
000055 c004      	RJMP _0xF
000056 9b91      	SBIS 0x12,1
000057 c002      	RJMP _0xF
000058 d14a      	RCALL SUBOPT_0x1
000059 f409      	BRNE _0x10
                 _0xF:
00005a c003      	RJMP _0xE
                 _0x10:
                 ; 0000 0021         return 1;
                 _0x2000002:
00005b e0e1      	LDI  R30,LOW(1)
00005c e0f0      	LDI  R31,HIGH(1)
00005d 9508      	RET
                 ; 0000 0022     return 0;
                 _0xE:
                 _0x2000001:
00005e e0e0      	LDI  R30,LOW(0)
00005f e0f0      	LDI  R31,HIGH(0)
000060 9508      	RET
                 ; 0000 0023 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0026 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0027     DDRA = 0xF0;
000061 efe0      	LDI  R30,LOW(240)
000062 bbea      	OUT  0x1A,R30
                 ; 0000 0028     DDRB = 0x00;
000063 e0e0      	LDI  R30,LOW(0)
000064 bbe7      	OUT  0x17,R30
                 ; 0000 0029     DDRC = 0x00;
000065 bbe4      	OUT  0x14,R30
                 ; 0000 002A     DDRD = 0xFF;
000066 efef      	LDI  R30,LOW(255)
000067 bbe1      	OUT  0x11,R30
                 ; 0000 002B 
                 ; 0000 002C     chosenFloor = 0;
000068 2444      	CLR  R4
000069 2455      	CLR  R5
                 ; 0000 002D 
                 ; 0000 002E     if(PINB.2 == 1){
00006a 9bb2      	SBIS 0x16,2
00006b c003      	RJMP _0x11
                 ; 0000 002F         currentFloor = 3;
00006c e0e3      	LDI  R30,LOW(3)
00006d e0f0      	LDI  R31,HIGH(3)
00006e c009      	RJMP _0x8E
                 ; 0000 0030     }else if(PINB.1 == 1){
                 _0x11:
00006f 9bb1      	SBIS 0x16,1
000070 c003      	RJMP _0x13
                 ; 0000 0031         currentFloor = 2;
000071 e0e2      	LDI  R30,LOW(2)
000072 e0f0      	LDI  R31,HIGH(2)
000073 c004      	RJMP _0x8E
                 ; 0000 0032     }else if(PINB.0 == 1){
                 _0x13:
000074 9bb0      	SBIS 0x16,0
000075 c003      	RJMP _0x15
                 ; 0000 0033         currentFloor = 1;
000076 e0e1      	LDI  R30,LOW(1)
000077 e0f0      	LDI  R31,HIGH(1)
                 _0x8E:
000078 013f      	MOVW R6,R30
                 ; 0000 0034     }
                 ; 0000 0035 
                 ; 0000 0036     if(PINC.0 == 1){
                 _0x15:
000079 9b98      	SBIS 0x13,0
00007a c003      	RJMP _0x16
                 ; 0000 0037         condition = 1;
00007b e0e1      	LDI  R30,LOW(1)
00007c e0f0      	LDI  R31,HIGH(1)
00007d c009      	RJMP _0x8F
                 ; 0000 0038     }else if(PINC.1 == 1){
                 _0x16:
00007e 9b99      	SBIS 0x13,1
00007f c003      	RJMP _0x18
                 ; 0000 0039         condition = 2;
000080 e0e2      	LDI  R30,LOW(2)
000081 e0f0      	LDI  R31,HIGH(2)
000082 c004      	RJMP _0x8F
                 ; 0000 003A     }else if(PINC.2 == 1){
                 _0x18:
000083 9b9a      	SBIS 0x13,2
000084 c003      	RJMP _0x1A
                 ; 0000 003B         condition = 3;
000085 e0e3      	LDI  R30,LOW(3)
000086 e0f0      	LDI  R31,HIGH(3)
                 _0x8F:
000087 014f      	MOVW R8,R30
                 ; 0000 003C     }
                 ; 0000 003D 
                 ; 0000 003E     while (1){
                 _0x1A:
                 _0x1B:
                 ; 0000 003F         //Check current floor
                 ; 0000 0040         if(PINB.2 == 1){
000088 9bb2      	SBIS 0x16,2
000089 c003      	RJMP _0x1E
                 ; 0000 0041             currentFloor = 3;
00008a e0e3      	LDI  R30,LOW(3)
00008b e0f0      	LDI  R31,HIGH(3)
00008c c009      	RJMP _0x90
                 ; 0000 0042         }else if(PINB.1 == 1){
                 _0x1E:
00008d 9bb1      	SBIS 0x16,1
00008e c003      	RJMP _0x20
                 ; 0000 0043             currentFloor = 2;
00008f e0e2      	LDI  R30,LOW(2)
000090 e0f0      	LDI  R31,HIGH(2)
000091 c004      	RJMP _0x90
                 ; 0000 0044         }else if(PINB.0 == 1){
                 _0x20:
000092 9bb0      	SBIS 0x16,0
000093 c003      	RJMP _0x22
                 ; 0000 0045             currentFloor = 1;
000094 e0e1      	LDI  R30,LOW(1)
000095 e0f0      	LDI  R31,HIGH(1)
                 _0x90:
000096 013f      	MOVW R6,R30
                 ; 0000 0046         }
                 ; 0000 0047 
                 ; 0000 0048         //Check current condition
                 ; 0000 0049         if(PINC.0 == 1){
                 _0x22:
000097 9b98      	SBIS 0x13,0
000098 c003      	RJMP _0x23
                 ; 0000 004A             condition = 1;
000099 e0e1      	LDI  R30,LOW(1)
00009a e0f0      	LDI  R31,HIGH(1)
00009b c009      	RJMP _0x91
                 ; 0000 004B         }else if(PINC.1 == 1){
                 _0x23:
00009c 9b99      	SBIS 0x13,1
00009d c003      	RJMP _0x25
                 ; 0000 004C             condition = 2;
00009e e0e2      	LDI  R30,LOW(2)
00009f e0f0      	LDI  R31,HIGH(2)
0000a0 c004      	RJMP _0x91
                 ; 0000 004D         }else if(PINC.2 == 1){
                 _0x25:
0000a1 9b9a      	SBIS 0x13,2
0000a2 c003      	RJMP _0x27
                 ; 0000 004E             condition = 3;
0000a3 e0e3      	LDI  R30,LOW(3)
0000a4 e0f0      	LDI  R31,HIGH(3)
                 _0x91:
0000a5 014f      	MOVW R8,R30
                 ; 0000 004F         }
                 ; 0000 0050 
                 ; 0000 0051         //Check chosen floor
                 ; 0000 0052         if(PINA.0 == 1 || PINC.3 == 1){
                 _0x27:
0000a6 99c8      	SBIC 0x19,0
0000a7 c002      	RJMP _0x29
0000a8 9b9b      	SBIS 0x13,3
0000a9 c00b      	RJMP _0x28
                 _0x29:
                 ; 0000 0053             chosenFloor = 3;
0000aa e0e3      	LDI  R30,LOW(3)
0000ab e0f0      	LDI  R31,HIGH(3)
0000ac 012f      	MOVW R4,R30
                 ; 0000 0054             if((currentFloor != chosenFloor) && (PINA.0 == 1))
                +
0000ad 1446     +CP R4 , R6
0000ae 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
0000af f011      	BREQ _0x2C
0000b0 99c8      	SBIC 0x19,0
0000b1 c001      	RJMP _0x2D
                 _0x2C:
0000b2 c001      	RJMP _0x2B
                 _0x2D:
                 ; 0000 0055                 PORTA.4 = 1;
0000b3 9adc      	SBI  0x1B,4
                 ; 0000 0056         }else if(PINA.1 == 1 || PINA.2 == 1 || PINC.4 == 1){
                 _0x2B:
0000b4 c021      	RJMP _0x30
                 _0x28:
0000b5 99c9      	SBIC 0x19,1
0000b6 c004      	RJMP _0x32
0000b7 99ca      	SBIC 0x19,2
0000b8 c002      	RJMP _0x32
0000b9 9b9c      	SBIS 0x13,4
0000ba c00d      	RJMP _0x31
                 _0x32:
                 ; 0000 0057             chosenFloor = 2;
0000bb e0e2      	LDI  R30,LOW(2)
0000bc e0f0      	LDI  R31,HIGH(2)
0000bd 012f      	MOVW R4,R30
                 ; 0000 0058             if(currentFloor != chosenFloor){
                +
0000be 1446     +CP R4 , R6
0000bf 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
0000c0 f031      	BREQ _0x34
                 ; 0000 0059                 if(PINA.1 == 1)
0000c1 9bc9      	SBIS 0x19,1
0000c2 c002      	RJMP _0x35
                 ; 0000 005A                     PORTA.5 = 1;
0000c3 9add      	SBI  0x1B,5
                 ; 0000 005B                 else if(PINA.2 == 1)
0000c4 c002      	RJMP _0x38
                 _0x35:
0000c5 99ca      	SBIC 0x19,2
                 ; 0000 005C                     PORTA.6 = 1;
0000c6 9ade      	SBI  0x1B,6
                 ; 0000 005D             }
                 _0x38:
                 ; 0000 005E         }else if(PINA.3 == 1 || PINC.5 == 1){
                 _0x34:
0000c7 c00e      	RJMP _0x3C
                 _0x31:
0000c8 99cb      	SBIC 0x19,3
0000c9 c002      	RJMP _0x3E
0000ca 9b9d      	SBIS 0x13,5
0000cb c00a      	RJMP _0x3D
                 _0x3E:
                 ; 0000 005F             chosenFloor = 1;
0000cc e0e1      	LDI  R30,LOW(1)
0000cd e0f0      	LDI  R31,HIGH(1)
0000ce 012f      	MOVW R4,R30
                 ; 0000 0060             if((currentFloor != chosenFloor) && (PINA.3 == 1))
                +
0000cf 1446     +CP R4 , R6
0000d0 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
0000d1 f011      	BREQ _0x41
0000d2 99cb      	SBIC 0x19,3
0000d3 c001      	RJMP _0x42
                 _0x41:
0000d4 c001      	RJMP _0x40
                 _0x42:
                 ; 0000 0061                 PORTA.7 = 1;
0000d5 9adf      	SBI  0x1B,7
                 ; 0000 0062         }
                 _0x40:
                 ; 0000 0063 
                 ; 0000 0064         if((isGoingUp() == 1) && (currentFloor == 2)){
                 _0x3D:
                 _0x3C:
                 _0x30:
0000d6 df74      	RCALL _isGoingUp
0000d7 9731      	SBIW R30,1
0000d8 f411      	BRNE _0x46
0000d9 d0ce      	RCALL SUBOPT_0x2
0000da f009      	BREQ _0x47
                 _0x46:
0000db c005      	RJMP _0x45
                 _0x47:
                 ; 0000 0065             up[2] = 0;
                +
0000dc e6e4     +LDI R30 , LOW ( _up + ( 4 ) )
0000dd e0f2     +LDI R31 , HIGH ( _up + ( 4 ) )
                 	__POINTW1MN _up,4
0000de d0ce      	RCALL SUBOPT_0x3
                 ; 0000 0066             PORTA.5 = 0;
0000df 98dd      	CBI  0x1B,5
                 ; 0000 0067         }else if((isGoingDown() == 1) && (currentFloor == 2)){
0000e0 c01e      	RJMP _0x4A
                 _0x45:
0000e1 df72      	RCALL _isGoingDown
0000e2 9731      	SBIW R30,1
0000e3 f411      	BRNE _0x4C
0000e4 d0c3      	RCALL SUBOPT_0x2
0000e5 f009      	BREQ _0x4D
                 _0x4C:
0000e6 c005      	RJMP _0x4B
                 _0x4D:
                 ; 0000 0068             down[2] = 0;
                +
0000e7 e6ec     +LDI R30 , LOW ( _down + ( 4 ) )
0000e8 e0f2     +LDI R31 , HIGH ( _down + ( 4 ) )
                 	__POINTW1MN _down,4
0000e9 d0c3      	RCALL SUBOPT_0x3
                 ; 0000 0069             PORTA.6 = 0;
0000ea 98de      	CBI  0x1B,6
                 ; 0000 006A         }else if(currentFloor == 1){
0000eb c013      	RJMP _0x50
                 _0x4B:
0000ec d0b6      	RCALL SUBOPT_0x1
0000ed f441      	BRNE _0x51
                 ; 0000 006B             down[1] = 0;
                +
0000ee e6ea     +LDI R30 , LOW ( _down + ( 2 ) )
0000ef e0f2     +LDI R31 , HIGH ( _down + ( 2 ) )
                 	__POINTW1MN _down,2
0000f0 d0bc      	RCALL SUBOPT_0x3
                 ; 0000 006C             up[1] = 0;
                +
0000f1 e6e2     +LDI R30 , LOW ( _up + ( 2 ) )
0000f2 e0f2     +LDI R31 , HIGH ( _up + ( 2 ) )
                 	__POINTW1MN _up,2
0000f3 d0b9      	RCALL SUBOPT_0x3
                 ; 0000 006D             PORTA.7 = 0;
0000f4 98df      	CBI  0x1B,7
                 ; 0000 006E         }else if(currentFloor == 3){
0000f5 c009      	RJMP _0x54
                 _0x51:
0000f6 d0a7      	RCALL SUBOPT_0x0
0000f7 f439      	BRNE _0x55
                 ; 0000 006F             down[3] = 0;
                +
0000f8 e6ee     +LDI R30 , LOW ( _down + ( 6 ) )
0000f9 e0f2     +LDI R31 , HIGH ( _down + ( 6 ) )
                 	__POINTW1MN _down,6
0000fa d0b2      	RCALL SUBOPT_0x3
                 ; 0000 0070             up[3] = 0;
                +
0000fb e6e6     +LDI R30 , LOW ( _up + ( 6 ) )
0000fc e0f2     +LDI R31 , HIGH ( _up + ( 6 ) )
                 	__POINTW1MN _up,6
0000fd d0af      	RCALL SUBOPT_0x3
                 ; 0000 0071             PORTA.4 = 0;
0000fe 98dc      	CBI  0x1B,4
                 ; 0000 0072         }
                 ; 0000 0073 
                 ; 0000 0074         if((up[0]+up[1]+up[2]+up[3]+down[0]+down[1]+down[2]+down[3]) == 0){
                 _0x55:
                 _0x54:
                 _0x50:
                 _0x4A:
                +
0000ff 91e0 0262+LDS R30 , _up + ( 2 )
000101 91f0 0263+LDS R31 , _up + ( 2 ) + 1
                 	__GETW1MN _up,2
000103 91a0 0260 	LDS  R26,_up
000105 91b0 0261 	LDS  R27,_up+1
000107 0fae      	ADD  R26,R30
000108 1fbf      	ADC  R27,R31
                +
000109 91e0 0264+LDS R30 , _up + ( 4 )
00010b 91f0 0265+LDS R31 , _up + ( 4 ) + 1
                 	__GETW1MN _up,4
00010d 0fae      	ADD  R26,R30
00010e 1fbf      	ADC  R27,R31
00010f d0a2      	RCALL SUBOPT_0x4
000110 0fea      	ADD  R30,R26
000111 1ffb      	ADC  R31,R27
000112 91a0 0268 	LDS  R26,_down
000114 91b0 0269 	LDS  R27,_down+1
000116 0fae      	ADD  R26,R30
000117 1fbf      	ADC  R27,R31
000118 d09e      	RCALL SUBOPT_0x5
000119 0fae      	ADD  R26,R30
00011a 1fbf      	ADC  R27,R31
                +
00011b 91e0 026c+LDS R30 , _down + ( 4 )
00011d 91f0 026d+LDS R31 , _down + ( 4 ) + 1
                 	__GETW1MN _down,4
00011f 0fae      	ADD  R26,R30
000120 1fbf      	ADC  R27,R31
                +
000121 91e0 026e+LDS R30 , _down + ( 6 )
000123 91f0 026f+LDS R31 , _down + ( 6 ) + 1
                 	__GETW1MN _down,6
000125 0fea      	ADD  R30,R26
000126 1ffb      	ADC  R31,R27
000127 9730      	SBIW R30,0
000128 f411      	BRNE _0x58
                 ; 0000 0075             PORTD.0 = 0;
000129 9890      	CBI  0x12,0
                 ; 0000 0076             PORTD.1 = 0;
00012a 9891      	CBI  0x12,1
                 ; 0000 0077         }
                 ; 0000 0078 
                 ; 0000 0079         if(chosenFloor != 0){
                 _0x58:
00012b 2c04      	MOV  R0,R4
00012c 2805      	OR   R0,R5
00012d f0b1      	BREQ _0x5D
                 ; 0000 007A             if(currentFloor != chosenFloor){
                +
00012e 1446     +CP R4 , R6
00012f 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
000130 f089      	BREQ _0x5E
                 ; 0000 007B                 switch (currentFloor > chosenFloor) {
000131 01f2      	MOVW R30,R4
000132 01d3      	MOVW R26,R6
000133 940e 01c5 	CALL __GTW12
                 ; 0000 007C                 case 1 :
000135 30e1      	CPI  R30,LOW(0x1)
000136 f429      	BRNE _0x62
                 ; 0000 007D                     down[chosenFloor] = 1;
000137 01f2      	MOVW R30,R4
000138 e6a8      	LDI  R26,LOW(_down)
000139 e0b2      	LDI  R27,HIGH(_down)
00013a d081      	RCALL SUBOPT_0x6
                 ; 0000 007E                     break;
00013b c006      	RJMP _0x61
                 ; 0000 007F                 case 0 :
                 _0x62:
00013c 30e0      	CPI  R30,0
00013d f421      	BRNE _0x64
                 ; 0000 0080                     up[chosenFloor] = 1;
00013e 01f2      	MOVW R30,R4
00013f e6a0      	LDI  R26,LOW(_up)
000140 e0b2      	LDI  R27,HIGH(_up)
000141 d07a      	RCALL SUBOPT_0x6
                 ; 0000 0081                     break;
                 ; 0000 0082                 break;
                 ; 0000 0083 
                 ; 0000 0084                 default:
                 _0x64:
                 ; 0000 0085                 }
                 _0x61:
                 ; 0000 0086             }
                 ; 0000 0087             chosenFloor = 0;
                 _0x5E:
000142 2444      	CLR  R4
000143 2455      	CLR  R5
                 ; 0000 0088         }
                 ; 0000 0089 
                 ; 0000 008A         if(PORTA.5 == 1)
                 _0x5D:
000144 9bdd      	SBIS 0x1B,5
000145 c006      	RJMP _0x65
                 ; 0000 008B             up[2] = 1;
                +
000146 e6e4     +LDI R30 , LOW ( _up + ( 4 ) )
000147 e0f2     +LDI R31 , HIGH ( _up + ( 4 ) )
                 	__POINTW1MN _up,4
000148 e0a1      	LDI  R26,LOW(1)
000149 e0b0      	LDI  R27,HIGH(1)
00014a 83a0      	STD  Z+0,R26
00014b 83b1      	STD  Z+1,R27
                 ; 0000 008C         if(PORTA.6 == 1)
                 _0x65:
00014c 9bde      	SBIS 0x1B,6
00014d c006      	RJMP _0x66
                 ; 0000 008D             down[2] = 1;
                +
00014e e6ec     +LDI R30 , LOW ( _down + ( 4 ) )
00014f e0f2     +LDI R31 , HIGH ( _down + ( 4 ) )
                 	__POINTW1MN _down,4
000150 e0a1      	LDI  R26,LOW(1)
000151 e0b0      	LDI  R27,HIGH(1)
000152 83a0      	STD  Z+0,R26
000153 83b1      	STD  Z+1,R27
                 ; 0000 008E 
                 ; 0000 008F         if((isGoingUp() == 0) && (isGoingDown() == 0) && (condition != 3)){
                 _0x66:
000154 def6      	RCALL _isGoingUp
000155 9730      	SBIW R30,0
000156 f441      	BRNE _0x68
000157 defc      	RCALL _isGoingDown
000158 9730      	SBIW R30,0
000159 f429      	BRNE _0x68
00015a e0e3      	LDI  R30,LOW(3)
00015b e0f0      	LDI  R31,HIGH(3)
00015c 15e8      	CP   R30,R8
00015d 05f9      	CPC  R31,R9
00015e f409      	BRNE _0x69
                 _0x68:
00015f c02f      	RJMP _0x67
                 _0x69:
                 ; 0000 0090             if(currentFloor == 1){
000160 d042      	RCALL SUBOPT_0x1
000161 f469      	BRNE _0x6A
                 ; 0000 0091                 if((up[2] == 1) || (up[3] == 1))
                +
000162 91e0 0264+LDS R30 , _up + ( 4 )
000164 91f0 0265+LDS R31 , _up + ( 4 ) + 1
                 	__GETW1MN _up,4
000166 9731      	SBIW R30,1
000167 f029      	BREQ _0x6C
000168 d049      	RCALL SUBOPT_0x4
000169 30e1      	CPI  R30,LOW(0x1)
00016a e0a0      	LDI  R26,HIGH(0x1)
00016b 07fa      	CPC  R31,R26
00016c f409      	BRNE _0x6B
                 _0x6C:
                 ; 0000 0092                     GoUp();
00016d ded7      	RCALL _GoUp
                 ; 0000 0093             }else if(currentFloor == 2){
                 _0x6B:
00016e c020      	RJMP _0x6E
                 _0x6A:
00016f d038      	RCALL SUBOPT_0x2
000170 f481      	BRNE _0x6F
                 ; 0000 0094                 PORTA.5 = 0;
000171 98dd      	CBI  0x1B,5
                 ; 0000 0095                 PORTA.6 = 0;
000172 98de      	CBI  0x1B,6
                 ; 0000 0096                 if(up[3] == 1)
000173 d03e      	RCALL SUBOPT_0x4
000174 30e1      	CPI  R30,LOW(0x1)
000175 e0a0      	LDI  R26,HIGH(0x1)
000176 07fa      	CPC  R31,R26
000177 f411      	BRNE _0x74
                 ; 0000 0097                     GoUp();
000178 decc      	RCALL _GoUp
                 ; 0000 0098                 else if(down[1] == 1)
000179 c006      	RJMP _0x75
                 _0x74:
00017a d03c      	RCALL SUBOPT_0x5
00017b 30e1      	CPI  R30,LOW(0x1)
00017c e0a0      	LDI  R26,HIGH(0x1)
00017d 07fa      	CPC  R31,R26
00017e f409      	BRNE _0x76
                 ; 0000 0099                     GoDown();
00017f dec8      	RCALL _GoDown
                 ; 0000 009A             }else if(currentFloor == 3){
                 _0x76:
                 _0x75:
000180 c00e      	RJMP _0x77
                 _0x6F:
000181 d01c      	RCALL SUBOPT_0x0
000182 f461      	BRNE _0x78
                 ; 0000 009B                 if((down[1] == 1) || (down[2] == 1))
000183 d033      	RCALL SUBOPT_0x5
000184 9731      	SBIW R30,1
000185 f041      	BREQ _0x7A
                +
000186 91e0 026c+LDS R30 , _down + ( 4 )
000188 91f0 026d+LDS R31 , _down + ( 4 ) + 1
                 	__GETW1MN _down,4
00018a 30e1      	CPI  R30,LOW(0x1)
00018b e0a0      	LDI  R26,HIGH(0x1)
00018c 07fa      	CPC  R31,R26
00018d f409      	BRNE _0x79
                 _0x7A:
                 ; 0000 009C                     GoDown();
00018e deb9      	RCALL _GoDown
                 ; 0000 009D             }
                 _0x79:
                 ; 0000 009E         }
                 _0x78:
                 _0x77:
                 _0x6E:
                 ; 0000 009F 
                 ; 0000 00A0 
                 ; 0000 00A1 
                 ; 0000 00A2         //Display
                 ; 0000 00A3         if(PINB.2 == 1){
                 _0x67:
00018f 9bb2      	SBIS 0x16,2
000190 c002      	RJMP _0x7C
                 ; 0000 00A4             PORTD.6 = 1;
000191 9a96      	SBI  0x12,6
                 ; 0000 00A5             PORTD.7 = 1;
000192 c008      	RJMP _0x92
                 ; 0000 00A6         }else if(PINB.1 == 1){
                 _0x7C:
000193 9bb1      	SBIS 0x16,1
000194 c003      	RJMP _0x82
                 ; 0000 00A7             PORTD.6 = 1;
000195 9a96      	SBI  0x12,6
                 ; 0000 00A8             PORTD.7 = 0;
000196 9897      	CBI  0x12,7
                 ; 0000 00A9         }else if(PINB.0 == 1){
000197 c004      	RJMP _0x87
                 _0x82:
000198 9bb0      	SBIS 0x16,0
000199 c002      	RJMP _0x88
                 ; 0000 00AA             PORTD.6 = 0;
00019a 9896      	CBI  0x12,6
                 ; 0000 00AB             PORTD.7 =1;
                 _0x92:
00019b 9a97      	SBI  0x12,7
                 ; 0000 00AC         }
                 ; 0000 00AD     }
                 _0x88:
                 _0x87:
00019c ceeb      	RJMP _0x1B
                 ; 0000 00AE }
                 _0x8D:
00019d cfff      	RJMP _0x8D
                 ; .FEND
                 
                 	.DSEG
                 _up:
000260           	.BYTE 0x8
                 _down:
000268           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00019e e0e3      	LDI  R30,LOW(3)
00019f e0f0      	LDI  R31,HIGH(3)
0001a0 15e6      	CP   R30,R6
0001a1 05f7      	CPC  R31,R7
0001a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001a3 e0e1      	LDI  R30,LOW(1)
0001a4 e0f0      	LDI  R31,HIGH(1)
0001a5 15e6      	CP   R30,R6
0001a6 05f7      	CPC  R31,R7
0001a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0001a8 e0e2      	LDI  R30,LOW(2)
0001a9 e0f0      	LDI  R31,HIGH(2)
0001aa 15e6      	CP   R30,R6
0001ab 05f7      	CPC  R31,R7
0001ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0001ad e0a0      	LDI  R26,LOW(0)
0001ae e0b0      	LDI  R27,HIGH(0)
0001af 83a0      	STD  Z+0,R26
0001b0 83b1      	STD  Z+1,R27
0001b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
                +
0001b2 91e0 0266+LDS R30 , _up + ( 6 )
0001b4 91f0 0267+LDS R31 , _up + ( 6 ) + 1
                 	__GETW1MN _up,6
0001b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
                +
0001b7 91e0 026a+LDS R30 , _down + ( 2 )
0001b9 91f0 026b+LDS R31 , _down + ( 2 ) + 1
                 	__GETW1MN _down,2
0001bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0001bc 0fee      	LSL  R30
0001bd 1fff      	ROL  R31
0001be 0fae      	ADD  R26,R30
0001bf 1fbf      	ADC  R27,R31
0001c0 e0e1      	LDI  R30,LOW(1)
0001c1 e0f0      	LDI  R31,HIGH(1)
0001c2 93ed      	ST   X+,R30
0001c3 93fc      	ST   X,R31
0001c4 9508      	RET
                 
                 
                 	.CSEG
                 __GTW12:
0001c5 17ea      	CP   R30,R26
0001c6 07fb      	CPC  R31,R27
0001c7 e0e1      	LDI  R30,1
0001c8 f00c      	BRLT __GTW12T
0001c9 27ee      	CLR  R30
                 __GTW12T:
0001ca 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   2 r1 :   0 r2 :   0 r3 :   0 r4 :  13 r5 :   7 r6 :  10 r7 :   7 
r8 :   3 r9 :   1 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   4 r25:   1 r26:  30 r27:  20 r28:   1 r29:   1 r30:  95 r31:  59 
x  :   4 y  :   0 z  :   6 
Registers used: 17 out of 35 (48.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   8 add   :   8 
adiw  :   0 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  21 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :  13 cpi   :   6 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  22 ld    :   0 ldd   :   0 ldi   :  88 
lds   :  20 lpm   :   0 lsl   :   1 lsr   :   0 mov   :   1 movw  :  11 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   0 out   :  10 pop   :   0 push  :   0 rcall :  31 ret   :  12 
reti  :   0 rjmp  :  62 rol   :   1 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   9 sbic  :   9 sbis  :  23 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   4 std   :   6 sts   :   0 sub   :   0 subi  :   0 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 31 out of 116 (26.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000396    918      0    918   32768   2.8%
[.dseg] 0x000060 0x000270      0     16     16    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
